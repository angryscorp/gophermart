// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/angryscorp/gophermart/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// BalanceMock is an autogenerated mock type for the Balance type
type BalanceMock struct {
	mock.Mock
}

type BalanceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *BalanceMock) EXPECT() *BalanceMock_Expecter {
	return &BalanceMock_Expecter{mock: &_m.Mock}
}

// Balance provides a mock function with given fields: ctx, userID
func (_m *BalanceMock) Balance(ctx context.Context, userID uuid.UUID) (model.Balance, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Balance")
	}

	var r0 model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Balance, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Balance); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.Balance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BalanceMock_Balance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Balance'
type BalanceMock_Balance_Call struct {
	*mock.Call
}

// Balance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *BalanceMock_Expecter) Balance(ctx interface{}, userID interface{}) *BalanceMock_Balance_Call {
	return &BalanceMock_Balance_Call{Call: _e.mock.On("Balance", ctx, userID)}
}

func (_c *BalanceMock_Balance_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *BalanceMock_Balance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *BalanceMock_Balance_Call) Return(_a0 model.Balance, _a1 error) *BalanceMock_Balance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BalanceMock_Balance_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Balance, error)) *BalanceMock_Balance_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, userID, orderID, amount
func (_m *BalanceMock) Withdraw(ctx context.Context, userID uuid.UUID, orderID string, amount float64) error {
	ret := _m.Called(ctx, userID, orderID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, float64) error); ok {
		r0 = rf(ctx, userID, orderID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BalanceMock_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type BalanceMock_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - orderID string
//   - amount float64
func (_e *BalanceMock_Expecter) Withdraw(ctx interface{}, userID interface{}, orderID interface{}, amount interface{}) *BalanceMock_Withdraw_Call {
	return &BalanceMock_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, userID, orderID, amount)}
}

func (_c *BalanceMock_Withdraw_Call) Run(run func(ctx context.Context, userID uuid.UUID, orderID string, amount float64)) *BalanceMock_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *BalanceMock_Withdraw_Call) Return(_a0 error) *BalanceMock_Withdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BalanceMock_Withdraw_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, float64) error) *BalanceMock_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawalHistory provides a mock function with given fields: ctx, userID
func (_m *BalanceMock) WithdrawalHistory(ctx context.Context, userID uuid.UUID) ([]model.Withdrawal, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawalHistory")
	}

	var r0 []model.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Withdrawal, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Withdrawal); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BalanceMock_WithdrawalHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawalHistory'
type BalanceMock_WithdrawalHistory_Call struct {
	*mock.Call
}

// WithdrawalHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *BalanceMock_Expecter) WithdrawalHistory(ctx interface{}, userID interface{}) *BalanceMock_WithdrawalHistory_Call {
	return &BalanceMock_WithdrawalHistory_Call{Call: _e.mock.On("WithdrawalHistory", ctx, userID)}
}

func (_c *BalanceMock_WithdrawalHistory_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *BalanceMock_WithdrawalHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *BalanceMock_WithdrawalHistory_Call) Return(_a0 []model.Withdrawal, _a1 error) *BalanceMock_WithdrawalHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BalanceMock_WithdrawalHistory_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]model.Withdrawal, error)) *BalanceMock_WithdrawalHistory_Call {
	_c.Call.Return(run)
	return _c
}

// NewBalanceMock creates a new instance of BalanceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBalanceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *BalanceMock {
	mock := &BalanceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
