// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/angryscorp/gophermart/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UsersMock is an autogenerated mock type for the Users type
type UsersMock struct {
	mock.Mock
}

type UsersMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersMock) EXPECT() *UsersMock_Expecter {
	return &UsersMock_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, username, passwordHash
func (_m *UsersMock) CreateUser(ctx context.Context, username string, passwordHash string) (*uuid.UUID, error) {
	ret := _m.Called(ctx, username, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*uuid.UUID, error)); ok {
		return rf(ctx, username, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *uuid.UUID); ok {
		r0 = rf(ctx, username, passwordHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersMock_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UsersMock_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - passwordHash string
func (_e *UsersMock_Expecter) CreateUser(ctx interface{}, username interface{}, passwordHash interface{}) *UsersMock_CreateUser_Call {
	return &UsersMock_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, username, passwordHash)}
}

func (_c *UsersMock_CreateUser_Call) Run(run func(ctx context.Context, username string, passwordHash string)) *UsersMock_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UsersMock_CreateUser_Call) Return(_a0 *uuid.UUID, _a1 error) *UsersMock_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersMock_CreateUser_Call) RunAndReturn(run func(context.Context, string, string) (*uuid.UUID, error)) *UsersMock_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UserData provides a mock function with given fields: ctx, username
func (_m *UsersMock) UserData(ctx context.Context, username string) (*model.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for UserData")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersMock_UserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserData'
type UsersMock_UserData_Call struct {
	*mock.Call
}

// UserData is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UsersMock_Expecter) UserData(ctx interface{}, username interface{}) *UsersMock_UserData_Call {
	return &UsersMock_UserData_Call{Call: _e.mock.On("UserData", ctx, username)}
}

func (_c *UsersMock_UserData_Call) Run(run func(ctx context.Context, username string)) *UsersMock_UserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersMock_UserData_Call) Return(_a0 *model.User, _a1 error) *UsersMock_UserData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersMock_UserData_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *UsersMock_UserData_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsersMock creates a new instance of UsersMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersMock {
	mock := &UsersMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
