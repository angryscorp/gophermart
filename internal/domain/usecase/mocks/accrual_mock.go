// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "github.com/angryscorp/gophermart/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// AccrualMock is an autogenerated mock type for the Accrual type
type AccrualMock struct {
	mock.Mock
}

type AccrualMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AccrualMock) EXPECT() *AccrualMock_Expecter {
	return &AccrualMock_Expecter{mock: &_m.Mock}
}

// Status provides a mock function with given fields: orderNumber
func (_m *AccrualMock) Status(orderNumber string) (*model.Accrual, error) {
	ret := _m.Called(orderNumber)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *model.Accrual
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Accrual, error)); ok {
		return rf(orderNumber)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Accrual); ok {
		r0 = rf(orderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Accrual)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccrualMock_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type AccrualMock_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - orderNumber string
func (_e *AccrualMock_Expecter) Status(orderNumber interface{}) *AccrualMock_Status_Call {
	return &AccrualMock_Status_Call{Call: _e.mock.On("Status", orderNumber)}
}

func (_c *AccrualMock_Status_Call) Run(run func(orderNumber string)) *AccrualMock_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AccrualMock_Status_Call) Return(_a0 *model.Accrual, _a1 error) *AccrualMock_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccrualMock_Status_Call) RunAndReturn(run func(string) (*model.Accrual, error)) *AccrualMock_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccrualMock creates a new instance of AccrualMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccrualMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccrualMock {
	mock := &AccrualMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
