// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const balance = `-- name: Balance :one
SELECT
    balance,
    withdrawn
FROM
    balances
WHERE
    user_id = $1
`

type BalanceRow struct {
	Balance   pgtype.Numeric
	Withdrawn pgtype.Numeric
}

func (q *Queries) Balance(ctx context.Context, userID uuid.UUID) (BalanceRow, error) {
	row := q.db.QueryRow(ctx, balance, userID)
	var i BalanceRow
	err := row.Scan(&i.Balance, &i.Withdrawn)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :exec
UPDATE balances
SET balance = $1,
    withdrawn = $2
WHERE
    user_id = $3
`

type UpdateBalanceParams struct {
	Balance   pgtype.Numeric
	Withdrawn pgtype.Numeric
	UserID    uuid.UUID
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) error {
	_, err := q.db.Exec(ctx, updateBalance, arg.Balance, arg.Withdrawn, arg.UserID)
	return err
}

const withdrawals = `-- name: Withdrawals :many
SELECT
    order_number,
    withdrawn,
    processed_at
FROM
    withdrawals
WHERE
    user_id = $1
`

type WithdrawalsRow struct {
	OrderNumber string
	Withdrawn   pgtype.Numeric
	ProcessedAt pgtype.Timestamptz
}

func (q *Queries) Withdrawals(ctx context.Context, userID uuid.UUID) ([]WithdrawalsRow, error) {
	rows, err := q.db.Query(ctx, withdrawals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WithdrawalsRow
	for rows.Next() {
		var i WithdrawalsRow
		if err := rows.Scan(&i.OrderNumber, &i.Withdrawn, &i.ProcessedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
