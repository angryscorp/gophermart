// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const checkUser = `-- name: CheckUser :one
SELECT id FROM users
WHERE username = $1 AND password_hash = $2
`

type CheckUserParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) CheckUser(ctx context.Context, arg CheckUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, checkUser, arg.Username, arg.PasswordHash)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const checkUsername = `-- name: CheckUsername :one
SELECT EXISTS(
    SELECT 1 FROM users
    WHERE username = $1
) AS user_exists
`

func (q *Queries) CheckUsername(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUsername, username)
	var user_exists bool
	err := row.Scan(&user_exists)
	return user_exists, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, username, password_hash)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	ID           uuid.UUID
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.ID, arg.Username, arg.PasswordHash)
	return err
}
